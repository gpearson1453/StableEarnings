"""
findMissOrDup.py checks for missing or duplicate files in a folder.

This script searches for duplicate race files in a folder by looking for
duplicate entry pairs ('race_id' and 'horse_name') in select_race_data.xlsx,
the Excel file generated by processSelectToExcel.py, after processSelectToExcel
has been run with that folder. It searches for missing files by extracting
dates and locations from the provided text block, which must be manually
created using text on Equibase for that month, and looking through the Excel
file to ensure that those values appear. Finally, it prints out the
information of missing and duplicate files, if any are found.

This script performs the following steps:
    - Creating a pandas DataFrame to parse the data in the Excel file.
    - Identifying duplicate rows that have the same 'race_id' and 'horse_name'.
    - Verifying the presence of specific date and track combinations in the
        dataset using a text block containing all race locations and dates for
        a certain month.
    - Printing missing entries and duplicate information for review.

Functions:
    - load_excel: Loads the Excel file into a pandas DataFrame.
    - find_duplicates: Finds and prints duplicate entries in the dataset.
    - extract_date_from_text: Extracts a date in 'Month Day, Year' format from
        a text block.
    - check_tracks_in_excel: Verifies that track names in the text blocks are
        present in the dataset for a given date.
    - main: Coordinates the loading, validation, and duplicate checking
        processes.

Usage:
    Execute the script directly to load the dataset, process date-track
    combinations, and identify duplicates.
    Ensure the 'file_path' and 'date_track_blocks' are correctly defined
    before running.
"""

import os
import pandas as pd
import re

# Set the working directory to the script's location
script_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(script_dir)


def load_excel(file_path):
    """
    Load the Excel file into a pandas DataFrame.

    Args:
        file_path (str): The path to the Excel file.

    Returns:
        pd.DataFrame: DataFrame containing the contents of the Excel file.
    """
    try:
        df = pd.read_excel(file_path)
        return df
    except FileNotFoundError:
        # Print error message if file not found
        print(f"File not found: {file_path}")
        return None


def find_duplicates(df):
    """
    Find and print duplicate entries in the DataFrame.

    Args:
        df (pd.DataFrame): DataFrame containing race data.
    """
    # Identify rows with duplicate race_id and horse_name
    duplicates = df[
        df.duplicated(subset=["race_id", "horse_name"], keep=False)
    ]

    if not duplicates.empty:
        # Display duplicates if found
        print("Duplicate entries found:")
        duplicate_pairs = duplicates[["file_number", "race_id", "horse_name"]]
        print(duplicate_pairs)
    else:
        # Indicate no duplicates were found
        print("No duplicates found.")


def extract_date_from_text(text_block):
    """
    Extract the date from the first line of the given text block.

    Args:
        text_block (str): Text block where the first line contains the date.

    Returns:
        str: Formatted date in 'Month Day, Year' format if successful,
        otherwise None.
    """
    # Split text block into lines and extract the first line
    lines = text_block.strip().splitlines()
    date_line = lines[0].strip()

    # Regular expression to match the expected date format
    date_pattern = r"(\w+), (\w+) (\d{1,2}) (\d{4})"

    match = re.match(date_pattern, date_line)

    if match:
        # Extract date components from the match
        day_name, month, day, year = match.groups()
        return f"{month} {day}, {year}"
    else:
        # Print error message for invalid date format
        print("Invalid date format in the text block.")
        return None


def check_tracks_in_excel(df, text_block):
    """
    Check if each track name and date pair is present in the DataFrame.

    Args:
        df (pd.DataFrame): DataFrame containing race data.
        text_block (str): Text block where the first line is a date and the
        subsequent lines are track names.
    """
    missing = False

    # Extract the date from the text block
    formatted_date = extract_date_from_text(text_block)
    if not formatted_date:
        return

    # Extract and clean track names from the text block
    track_names = [
        line.strip() for line in text_block.strip().splitlines()[1:]
    ]

    for track in track_names:
        # Search for date-track combination in the DataFrame
        search_pattern = f"{formatted_date}_{track}"
        if not df["race_id"].str.contains(search_pattern, na=False).any():
            # Print message if the combination is missing
            print(f"No match found for {search_pattern}")
            missing = True

    return missing


def main(file_path, date_track_blocks):
    """
    Execute main function to check for duplicates and missing files.

    Args:
        - file_path (str): Path to the Excel file.
        - date_track_blocks (list): List of text blocks, each containing a date
          and track names.
    """
    # Load the Excel file into a DataFrame
    df = load_excel(file_path)
    if df is None:
        return

    any_missing = False

    # Check for missing date-track combinations
    for text_block in date_track_blocks:
        if check_tracks_in_excel(df, text_block):
            any_missing = True
    if not any_missing:
        print("No files missing.")

    # Check for duplicate entries in the data
    find_duplicates(df)


if __name__ == "__main__":
    # Define the path to the Excel file
    file_path = "select_race_data.xlsx"

    # Define the list of text blocks for validation
    date_track_blocks = []

    # Run the main function
    main(file_path, date_track_blocks)
